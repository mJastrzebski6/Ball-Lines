/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Algorithm.ts":
/*!**************************!*\
  !*** ./src/Algorithm.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Algorithm = void 0;\r\n/**\r\n * Class with pathfinding algorithm.\r\n */\r\nclass Algorithm {\r\n    /**\r\n     *\r\n     * @param array\r\n     * @returns array of visited squares\r\n     */\r\n    static findWay(array) {\r\n        var visited = Array.from(Array(array.length), () => Array(array[0].length).fill([]));\r\n        for (var i = 0; i < array.length; i++) {\r\n            for (var j = 0; j < array[0].length; j++) {\r\n                if (array[i][j] == \"S\") {\r\n                    array[i][j] = \"1\";\r\n                }\r\n            }\r\n        }\r\n        let numberOfVisitedNodesBefore = 0;\r\n        let numberOfVisitedNodesAfter = 0;\r\n        let numberWeAreChecking = 1;\r\n        let found = false;\r\n        while (true) {\r\n            for (var i = 0; i < array.length; i++) {\r\n                for (var j = 0; j < array[0].length; j++) {\r\n                    if (array[i][j] != numberWeAreChecking.toString())\r\n                        continue;\r\n                    if (i != array[0].length - 1 && array[i + 1][j] != \"X\") {\r\n                        if (array[i + 1][j] == \"M\") {\r\n                            visited[i + 1][j] = [...visited[i][j], i * 9 + j];\r\n                            found = true;\r\n                        }\r\n                        else if (array[i + 1][j] == \"0\") {\r\n                            visited[i + 1][j] = [...visited[i][j], i * 9 + j];\r\n                            array[i + 1][j] = (numberWeAreChecking + 1).toString();\r\n                            numberOfVisitedNodesAfter++;\r\n                        }\r\n                    }\r\n                    if (i != 0 && array[i - 1][j] != \"X\") {\r\n                        if (array[i - 1][j] == \"M\") {\r\n                            visited[i - 1][j] = [...visited[i][j], i * 9 + j];\r\n                            found = true;\r\n                        }\r\n                        else if (array[i - 1][j] == \"0\") {\r\n                            visited[i - 1][j] = [...visited[i][j], i * 9 + j];\r\n                            array[i - 1][j] = (numberWeAreChecking + 1).toString();\r\n                            numberOfVisitedNodesAfter++;\r\n                        }\r\n                    }\r\n                    if (j != array[0].length - 1 && array[i][j + 1] != \"X\") {\r\n                        if (array[i][j + 1] == \"M\") {\r\n                            visited[i][j + 1] = [...visited[i][j], i * 9 + j];\r\n                            found = true;\r\n                        }\r\n                        else if (array[i][j + 1] == \"0\") {\r\n                            visited[i][j + 1] = [...visited[i][j], i * 9 + j];\r\n                            array[i][j + 1] = (numberWeAreChecking + 1).toString();\r\n                            numberOfVisitedNodesAfter++;\r\n                        }\r\n                    }\r\n                    if (j != 0 && array[i][j - 1] != \"X\") {\r\n                        if (array[i][j - 1] == \"M\") {\r\n                            visited[i][j - 1] = [...visited[i][j], i * 9 + j];\r\n                            found = true;\r\n                        }\r\n                        else if (array[i][j - 1] == \"0\") {\r\n                            visited[i][j - 1] = [...visited[i][j], i * 9 + j];\r\n                            array[i][j - 1] = (numberWeAreChecking + 1).toString();\r\n                            numberOfVisitedNodesAfter++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (found == true)\r\n                break;\r\n            if (numberOfVisitedNodesBefore == numberOfVisitedNodesAfter)\r\n                break;\r\n            else\r\n                numberOfVisitedNodesBefore = numberOfVisitedNodesAfter;\r\n            numberWeAreChecking++;\r\n        }\r\n        if (found == false)\r\n            return false;\r\n        for (let i = 0; i < visited.length; i++) {\r\n            for (let j = 0; j < visited[0].length; j++) {\r\n                if (array[i][j] == \"M\") {\r\n                    visited[i][j] = [...visited[i][j], i * 9 + j];\r\n                    return visited[i][j];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.Algorithm = Algorithm;\r\n\n\n//# sourceURL=webpack://kulki/./src/Algorithm.ts?");

/***/ }),

/***/ "./src/Playboard.ts":
/*!**************************!*\
  !*** ./src/Playboard.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Playboard = void 0;\r\nconst Square_1 = __webpack_require__(/*! ./Square */ \"./src/Square.ts\");\r\nconst Algorithm_1 = __webpack_require__(/*! ./Algorithm */ \"./src/Algorithm.ts\");\r\nconst TakingDown_1 = __webpack_require__(/*! ./TakingDown */ \"./src/TakingDown.ts\");\r\nfunction decorator() {\r\n    return function (target, property, descriptor) {\r\n        const originalFunction = descriptor.value;\r\n        const newFunction = function (...args) {\r\n            originalFunction.apply(this, args);\r\n            if (args[0] == false)\r\n                return;\r\n            if (document.body.classList.contains(\"second\")) {\r\n                document.body.classList.remove(\"second\");\r\n            }\r\n            else\r\n                document.body.classList.add(\"second\");\r\n        };\r\n        descriptor.value = newFunction;\r\n        return descriptor;\r\n    };\r\n}\r\n/**\r\n * Class with game functionalities\r\n */\r\nclass Playboard {\r\n    constructor() {\r\n        this.colors = [\"#FFCE30\", \"#E83845\", \"#E66101\", \"#746AB0\", \"#FFFFFF\", \"#4DAC26\", \"#D01C8B\"];\r\n        this.arrayOfSquares = [];\r\n        this.matrix = [];\r\n        this.pointsLabel = document.getElementById(\"pointsLabel\");\r\n        this.ballsPreview = document.getElementById(\"ballsPreview\");\r\n        this.points = 0;\r\n        this.nextBalls = [];\r\n        this.checkedCircle = [-1, -1];\r\n        this.waitInterval = false;\r\n        for (let i = 1; i <= 9; i++) {\r\n            this.matrix.push([]);\r\n            for (let j = 1; j <= 9; j++) {\r\n                this.arrayOfSquares.push(new Square_1.Square(i, j));\r\n                this.matrix[i - 1].push(\"0\");\r\n            }\r\n        }\r\n        this.arrayOfSquares.forEach(square => {\r\n            square.div.addEventListener(\"click\", (event) => this.clickSquareListener(event));\r\n            square.div.addEventListener(\"mouseover\", (event) => this.mouseOverSquareListener(event));\r\n        });\r\n        for (let i = 0; i < 3; i++) {\r\n            //this.addCircle()\r\n            const colorIndex = Math.floor(Math.random() * this.colors.length);\r\n            this.nextBalls[i] = this.colors[colorIndex];\r\n        }\r\n        this.handlePreview();\r\n    }\r\n    /**\r\n     * Function that creates new circle.\r\n     * @param color\r\n     */\r\n    addCircle(color) {\r\n        let x, y;\r\n        while (true) {\r\n            x = Math.floor(Math.random() * 9);\r\n            y = Math.floor(Math.random() * 9);\r\n            const index = x * 9 + y;\r\n            if (this.arrayOfSquares[index].circleInsideColor != \"null\")\r\n                continue;\r\n            this.putCircle(x + 1, y + 1, color);\r\n            break;\r\n        }\r\n    }\r\n    /**\r\n     * Click square handler.\r\n     * @param event\r\n     * @returns\r\n     */\r\n    clickSquareListener(event) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h;\r\n        if (this.waitInterval == true)\r\n            return;\r\n        if (!(event.target instanceof HTMLDivElement))\r\n            return;\r\n        const div = event.target;\r\n        if (div.dataset.xCord == undefined || div.dataset.yCord == undefined)\r\n            return;\r\n        const xCord = parseInt(div.dataset.xCord);\r\n        const yCord = parseInt(div.dataset.yCord);\r\n        const index = ((xCord - 1) * 9) + (yCord) - 1;\r\n        if (this.matrix[xCord - 1][yCord - 1] == \"X\" &&\r\n            this.checkedCircle[0] == xCord &&\r\n            this.checkedCircle[1] == yCord) {\r\n            this.checkedCircle = [-1, -1];\r\n            this.arrayOfSquares[index].makeSmaller();\r\n            return;\r\n        }\r\n        if (this.arrayOfSquares[index].circleInsideColor != \"null\") {\r\n            if (((_b = (_a = this.matrix) === null || _a === void 0 ? void 0 : _a[xCord - 2]) === null || _b === void 0 ? void 0 : _b[yCord - 1]) == \"0\" ||\r\n                ((_d = (_c = this.matrix) === null || _c === void 0 ? void 0 : _c[xCord]) === null || _d === void 0 ? void 0 : _d[yCord - 1]) == \"0\" ||\r\n                ((_f = (_e = this.matrix) === null || _e === void 0 ? void 0 : _e[xCord - 1]) === null || _f === void 0 ? void 0 : _f[yCord]) == \"0\" ||\r\n                ((_h = (_g = this.matrix) === null || _g === void 0 ? void 0 : _g[xCord - 1]) === null || _h === void 0 ? void 0 : _h[yCord - 2]) == \"0\") {\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n            this.clearDivsBackground();\r\n            if (this.checkedCircle[0] != -1) {\r\n                const previousBigIndex = ((this.checkedCircle[0] - 1) * 9) + (this.checkedCircle[1]) - 1;\r\n                this.arrayOfSquares[previousBigIndex].makeSmaller();\r\n            }\r\n            this.arrayOfSquares[index].makeBigger();\r\n            this.checkedCircle = [xCord, yCord];\r\n            return;\r\n        }\r\n        this.moveCircle(xCord, yCord);\r\n    }\r\n    /**\r\n     * Mouse over square handler.\r\n     * @param event\r\n     * @returns\r\n     */\r\n    mouseOverSquareListener(event) {\r\n        if (this.waitInterval == true)\r\n            return;\r\n        if (!(event.target instanceof HTMLDivElement))\r\n            return;\r\n        const div = event.target;\r\n        if (div.dataset.xCord == undefined || div.dataset.yCord == undefined)\r\n            return;\r\n        const xCord = parseInt(div.dataset.xCord);\r\n        const yCord = parseInt(div.dataset.yCord);\r\n        //console.log(xCord,yCord)\r\n        const index = ((xCord - 1) * 9) + (yCord) - 1;\r\n        if (this.arrayOfSquares[index].circleInsideColor != \"null\") {\r\n            this.clearDivsBackground();\r\n            return;\r\n        }\r\n        const result = this.getWay({ x: xCord, y: yCord });\r\n        if (result == false || result == undefined)\r\n            return;\r\n        this.clearDivsBackground();\r\n        result.forEach(node => {\r\n            this.arrayOfSquares[node].div.classList.add(\"highlightedSquare\");\r\n        });\r\n    }\r\n    /**\r\n     * Function that moves the circle.\r\n     * @param xCord\r\n     * @param yCord\r\n     * @returns\r\n     */\r\n    moveCircle(xCord, yCord) {\r\n        const result = this.getWay({ x: xCord, y: yCord });\r\n        if (result == false || result == undefined)\r\n            return;\r\n        result.forEach(squareIndex => {\r\n            this.arrayOfSquares[squareIndex].div.classList.add(\"highlightedSquare2\");\r\n        });\r\n        this.waitInterval = true;\r\n        setTimeout(() => {\r\n            this.waitInterval = false;\r\n            this.clearDivsBackground();\r\n            this.countingPoints(true);\r\n        }, 1000);\r\n        const colorOfDeleted = this.deleteCircle(this.checkedCircle[0], this.checkedCircle[1]);\r\n        this.putCircle(xCord, yCord, colorOfDeleted);\r\n        this.checkedCircle = [-1, -1];\r\n    }\r\n    /**\r\n     * Function that puts circle into array and into div.\r\n     * @param xCord\r\n     * @param yCord\r\n     * @param color\r\n     */\r\n    putCircle(xCord, yCord, color) {\r\n        const index = ((xCord - 1) * 9) + (yCord) - 1;\r\n        this.matrix[xCord - 1][yCord - 1] = \"X\";\r\n        this.arrayOfSquares[index].circleInsideColor = color;\r\n        this.arrayOfSquares[index].insertCircle();\r\n        this.arrayOfSquares[index].addCursorPointer();\r\n    }\r\n    /**\r\n     * Function that deletes circle from array and from the div.\r\n     * @param xCord\r\n     * @param yCord\r\n     * @returns\r\n     */\r\n    deleteCircle(xCord, yCord) {\r\n        const index = ((xCord - 1) * 9) + (yCord) - 1;\r\n        const color = this.arrayOfSquares[index].circleInsideColor;\r\n        this.arrayOfSquares[index].deleteCircle();\r\n        this.matrix[xCord - 1][yCord - 1] = \"0\";\r\n        this.arrayOfSquares[index].removeCursorPointer();\r\n        return color;\r\n    }\r\n    /**\r\n     * Function that starts a function that checks if there is path.\r\n     * @param coords\r\n     * @returns\r\n     */\r\n    getWay(coords) {\r\n        if (this.checkedCircle[0] == -1)\r\n            return;\r\n        let copy = JSON.parse(JSON.stringify(this.matrix));\r\n        copy[this.checkedCircle[0] - 1][this.checkedCircle[1] - 1] = \"S\";\r\n        copy[coords.x - 1][coords.y - 1] = \"M\";\r\n        return Algorithm_1.Algorithm.findWay(copy);\r\n    }\r\n    /**\r\n     * Function that clears all squares backgrounds.\r\n     */\r\n    clearDivsBackground() {\r\n        this.arrayOfSquares.forEach(node => {\r\n            node.div.classList.remove(\"highlightedSquare\");\r\n            node.div.classList.remove(\"highlightedSquare2\");\r\n        });\r\n    }\r\n    /**\r\n     * Function that count points after taking down circles.\r\n     * @param x\r\n     */\r\n    countingPoints(x) {\r\n        let unique = TakingDown_1.TakingDown.takeDownAll({ array: this.arrayOfSquares });\r\n        this.points += unique.length;\r\n        this.pointsLabel.innerText = `Punkty: ${this.points}`;\r\n        unique.forEach(squareIndex => {\r\n            this.deleteCircle(this.arrayOfSquares[squareIndex].x, this.arrayOfSquares[squareIndex].y);\r\n        });\r\n        if (x == true && unique.length == 0)\r\n            this.handlePreview();\r\n    }\r\n    /**\r\n     * Function that handles preview of 3 next circles.\r\n     */\r\n    handlePreview() {\r\n        this.isEnd(3);\r\n        this.ballsPreview.innerHTML = \"\";\r\n        for (let i = 0; i < 3; i++) {\r\n            this.addCircle(this.nextBalls[i]);\r\n            const nextColorIndex = Math.floor(Math.random() * this.colors.length);\r\n            this.nextBalls[i] = this.colors[nextColorIndex];\r\n            let div = document.createElement(\"div\");\r\n            div.classList.add(\"previewBallDiv\");\r\n            let circle = document.createElement(\"div\");\r\n            circle.classList.add(\"circle\");\r\n            circle.style.backgroundColor = this.nextBalls[i];\r\n            div.appendChild(circle);\r\n            this.ballsPreview.appendChild(div);\r\n        }\r\n        this.countingPoints(false);\r\n        this.isEnd(1);\r\n    }\r\n    /**\r\n     * Function that checks if the game is over.\r\n     * @param max\r\n     */\r\n    isEnd(max) {\r\n        let blanks = 0;\r\n        this.arrayOfSquares.forEach(square => {\r\n            if (square.circleInsideColor == \"null\")\r\n                blanks++;\r\n        });\r\n        if (blanks < max) {\r\n            alert(`Koniec! Zdobyłeś ${this.points} punków.`);\r\n        }\r\n    }\r\n}\r\n__decorate([\r\n    decorator()\r\n], Playboard.prototype, \"countingPoints\", null);\r\nexports.Playboard = Playboard;\r\n\n\n//# sourceURL=webpack://kulki/./src/Playboard.ts?");

/***/ }),

/***/ "./src/Square.ts":
/*!***********************!*\
  !*** ./src/Square.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/**\r\n * Class respresending one element of grid.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Square = void 0;\r\nclass Square {\r\n    constructor(x, y) {\r\n        var _a;\r\n        this.circleDiv = document.createElement(\"div\");\r\n        this.x = x;\r\n        this.y = y;\r\n        this.div = document.createElement(\"div\");\r\n        this.div.classList.add(\"square\");\r\n        this.div.dataset.xCord = x.toString();\r\n        this.div.dataset.yCord = y.toString();\r\n        //this.div.innerText = ((x-1)*9+y-1).toString()\r\n        (_a = document.getElementById(\"playboard\")) === null || _a === void 0 ? void 0 : _a.appendChild(this.div);\r\n        this.circleInsideColor = \"null\";\r\n    }\r\n    /**\r\n     * Adding circle to the square.\r\n     */\r\n    insertCircle() {\r\n        this.circleDiv.classList.add(\"circle\");\r\n        this.circleDiv.style.backgroundColor = this.circleInsideColor;\r\n        this.div.appendChild(this.circleDiv);\r\n    }\r\n    /**\r\n     * Deleting circle from the square.\r\n     */\r\n    deleteCircle() {\r\n        this.makeSmaller();\r\n        this.circleInsideColor = \"null\";\r\n        this.div.innerHTML = \"\";\r\n    }\r\n    /**\r\n     * Making circle inside div bigger.\r\n     */\r\n    makeBigger() {\r\n        let circle = this.div.firstChild;\r\n        circle.classList.remove(\"circle\");\r\n        circle.classList.add(\"checkedCircle\");\r\n    }\r\n    /**\r\n     * Making circle in div smaller.\r\n     */\r\n    makeSmaller() {\r\n        let circle = this.div.firstChild;\r\n        circle.classList.remove(\"checkedCircle\");\r\n        circle.classList.add(\"circle\");\r\n    }\r\n    /**\r\n     * Adding cursor pointer to the square.\r\n     */\r\n    addCursorPointer() {\r\n        this.div.classList.add(\"checkedSquare\");\r\n    }\r\n    /**\r\n     * Deleting cursor pointer from the square.\r\n     */\r\n    removeCursorPointer() {\r\n        this.div.classList.remove(\"checkedSquare\");\r\n    }\r\n}\r\nexports.Square = Square;\r\n\n\n//# sourceURL=webpack://kulki/./src/Square.ts?");

/***/ }),

/***/ "./src/TakingDown.ts":
/*!***************************!*\
  !*** ./src/TakingDown.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.TakingDown = void 0;\r\n/**\r\n * Class with functions that are looking for pawns to take down.\r\n */\r\nclass TakingDown {\r\n    /**\r\n     * Function that collects all the pieces to be taken down.\r\n     * @param array\r\n     * @returns\r\n     */\r\n    static takeDownAll(array) {\r\n        let takenDown = [];\r\n        takenDown.push.apply(takenDown, this.takeDownHorizontally(array.array));\r\n        takenDown.push.apply(takenDown, this.takeDownVertically(array.array));\r\n        takenDown.push.apply(takenDown, this.takeDownDiagonally(array.array));\r\n        var unique = takenDown.filter(function (elem, index, self) {\r\n            return index === self.indexOf(elem);\r\n        });\r\n        return unique;\r\n    }\r\n    /**\r\n     * Function that collects horizonally pieces to be taken down.\r\n     * @param array\r\n     * @returns\r\n     */\r\n    static takeDownHorizontally(array) {\r\n        let takenDown = [];\r\n        let lastColor = \"\";\r\n        let streak = 1;\r\n        let index = -1;\r\n        array.forEach(square => {\r\n            index++;\r\n            if (square.circleInsideColor == lastColor && square.circleInsideColor != \"null\")\r\n                streak++;\r\n            else {\r\n                if (streak >= 5) {\r\n                    for (let i = 0; i < streak; i++) {\r\n                        takenDown.push(index - i - 1);\r\n                    }\r\n                }\r\n                streak = 1;\r\n                lastColor = square.circleInsideColor;\r\n            }\r\n            if ((index + 1) % 9 == 0) {\r\n                if (streak >= 5) {\r\n                    for (let i = 0; i < streak; i++) {\r\n                        takenDown.push(index - i);\r\n                    }\r\n                }\r\n                lastColor = \"\";\r\n                streak = 1;\r\n            }\r\n        });\r\n        return takenDown;\r\n    }\r\n    /**\r\n     * Function that collects vertically all the pieces to be taken down.\r\n     * @param array\r\n     * @returns\r\n     */\r\n    static takeDownVertically(array) {\r\n        let takenDown = [];\r\n        let lastColor = \"\";\r\n        let streak = 1;\r\n        let index = 0;\r\n        for (let i = 0; i < 9; i++) {\r\n            for (let j = 0; j < 9; j++) {\r\n                index = j * 9 + i;\r\n                if (array[index].circleInsideColor == lastColor && array[index].circleInsideColor != \"null\")\r\n                    streak++;\r\n                else {\r\n                    if (streak >= 5) {\r\n                        for (let k = 0; k < streak; k++) {\r\n                            takenDown.push(index - k * 9 - 9);\r\n                        }\r\n                    }\r\n                    streak = 1;\r\n                    lastColor = array[index].circleInsideColor;\r\n                }\r\n                if (index >= 72) {\r\n                    if (streak >= 5) {\r\n                        for (let k = 0; k < streak; k++) {\r\n                            takenDown.push(index - k * 9);\r\n                        }\r\n                    }\r\n                    lastColor = \"\";\r\n                    streak = 1;\r\n                }\r\n            }\r\n        }\r\n        return takenDown;\r\n    }\r\n    /**\r\n     * Function that collects diagonally all the pieces to be taken down.\r\n     * @param array\r\n     * @returns\r\n     */\r\n    static takeDownDiagonally(array) {\r\n        let takenDown = [];\r\n        const startLeft = [36, 27, 18, 9, 0, 1, 2, 3, 4];\r\n        const startRight = [4, 5, 6, 7, 8, 17, 26, 35, 44];\r\n        startLeft.forEach(index => {\r\n            let checkIndex = index;\r\n            let lastColor = \"\";\r\n            let streak = 1;\r\n            while (true) {\r\n                if (array[checkIndex].circleInsideColor == lastColor && array[checkIndex].circleInsideColor != \"null\")\r\n                    streak++;\r\n                else {\r\n                    if (streak >= 5) {\r\n                        for (let k = 0; k < streak; k++) {\r\n                            takenDown.push(checkIndex - k * 10 - 10);\r\n                        }\r\n                    }\r\n                    streak = 1;\r\n                    lastColor = array[checkIndex].circleInsideColor;\r\n                }\r\n                if (checkIndex >= 72 || (checkIndex + 1) % 9 == 0) {\r\n                    if (streak >= 5) {\r\n                        for (let k = 0; k < streak; k++) {\r\n                            takenDown.push(checkIndex - k * 10);\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                checkIndex += 10;\r\n            }\r\n        });\r\n        startRight.forEach(index => {\r\n            let checkIndex = index;\r\n            let lastColor = \"\";\r\n            let streak = 1;\r\n            while (true) {\r\n                if (array[checkIndex].circleInsideColor == lastColor && array[checkIndex].circleInsideColor != \"null\")\r\n                    streak++;\r\n                else {\r\n                    if (streak >= 5) {\r\n                        for (let k = 0; k < streak; k++) {\r\n                            takenDown.push(checkIndex - k * 8 - 8);\r\n                        }\r\n                    }\r\n                    streak = 1;\r\n                    lastColor = array[checkIndex].circleInsideColor;\r\n                }\r\n                if (checkIndex >= 72 || (checkIndex) % 9 == 0) {\r\n                    if (streak >= 5) {\r\n                        for (let k = 0; k < streak; k++) {\r\n                            takenDown.push(checkIndex - k * 8);\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                checkIndex += 8;\r\n            }\r\n        });\r\n        return takenDown;\r\n    }\r\n}\r\nexports.TakingDown = TakingDown;\r\n\n\n//# sourceURL=webpack://kulki/./src/TakingDown.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst Playboard_1 = __webpack_require__(/*! ./Playboard */ \"./src/Playboard.ts\");\r\nconst clientPlayboard = new Playboard_1.Playboard();\r\n\n\n//# sourceURL=webpack://kulki/./src/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;